"use strict";
// Warning: Don't edit file (autogenerated from python -m dev codegen).
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAutosetpythonextensioninterpreter = exports.getAutosetpythonextensioninterpreter = exports.setVerifylsp = exports.getVerifylsp = exports.setHome = exports.getHome = exports.setRccConfigLocation = exports.getRccConfigLocation = exports.setRccEndpoint = exports.getRccEndpoint = exports.setRccLocation = exports.getRccLocation = exports.setLanguageServerPython = exports.getLanguageServerPython = exports.setLanguageServerArgs = exports.getLanguageServerArgs = exports.setLanguageServerTcpPort = exports.getLanguageServerTcpPort = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_INTERPRETER = exports.ROBOCORP_VERIFY_LSP = exports.ROBOCORP_HOME = exports.ROBOCORP_RCC_CONFIG_LOCATION = exports.ROBOCORP_RCC_ENDPOINT = exports.ROBOCORP_RCC_LOCATION = exports.ROBOCORP_LANGUAGE_SERVER_PYTHON = exports.ROBOCORP_LANGUAGE_SERVER_ARGS = exports.ROBOCORP_LANGUAGE_SERVER_TCP_PORT = exports.get = void 0;
const vscode_1 = require("vscode");
function get(key) {
    var dot = key.lastIndexOf('.');
    var section = key.substring(0, dot);
    var name = key.substring(dot + 1);
    return vscode_1.workspace.getConfiguration(section).get(name);
}
exports.get = get;
exports.ROBOCORP_LANGUAGE_SERVER_TCP_PORT = "robocorp.language-server.tcp-port";
exports.ROBOCORP_LANGUAGE_SERVER_ARGS = "robocorp.language-server.args";
exports.ROBOCORP_LANGUAGE_SERVER_PYTHON = "robocorp.language-server.python";
exports.ROBOCORP_RCC_LOCATION = "robocorp.rcc.location";
exports.ROBOCORP_RCC_ENDPOINT = "robocorp.rcc.endpoint";
exports.ROBOCORP_RCC_CONFIG_LOCATION = "robocorp.rcc.config_location";
exports.ROBOCORP_HOME = "robocorp.home";
exports.ROBOCORP_VERIFY_LSP = "robocorp.verifyLSP";
exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_INTERPRETER = "robocorp.autoSetPythonExtensionInterpreter";
function getLanguageServerTcpPort() {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_TCP_PORT;
    return get(key);
}
exports.getLanguageServerTcpPort = getLanguageServerTcpPort;
function setLanguageServerTcpPort(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_LANGUAGE_SERVER_TCP_PORT;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setLanguageServerTcpPort = setLanguageServerTcpPort;
function getLanguageServerArgs() {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_ARGS;
    return get(key);
}
exports.getLanguageServerArgs = getLanguageServerArgs;
function setLanguageServerArgs(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_LANGUAGE_SERVER_ARGS;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setLanguageServerArgs = setLanguageServerArgs;
function getLanguageServerPython() {
    let key = exports.ROBOCORP_LANGUAGE_SERVER_PYTHON;
    return get(key);
}
exports.getLanguageServerPython = getLanguageServerPython;
function setLanguageServerPython(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_LANGUAGE_SERVER_PYTHON;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setLanguageServerPython = setLanguageServerPython;
function getRccLocation() {
    let key = exports.ROBOCORP_RCC_LOCATION;
    return get(key);
}
exports.getRccLocation = getRccLocation;
function setRccLocation(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_RCC_LOCATION;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setRccLocation = setRccLocation;
function getRccEndpoint() {
    let key = exports.ROBOCORP_RCC_ENDPOINT;
    return get(key);
}
exports.getRccEndpoint = getRccEndpoint;
function setRccEndpoint(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_RCC_ENDPOINT;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setRccEndpoint = setRccEndpoint;
function getRccConfigLocation() {
    let key = exports.ROBOCORP_RCC_CONFIG_LOCATION;
    return get(key);
}
exports.getRccConfigLocation = getRccConfigLocation;
function setRccConfigLocation(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_RCC_CONFIG_LOCATION;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setRccConfigLocation = setRccConfigLocation;
function getHome() {
    let key = exports.ROBOCORP_HOME;
    return get(key);
}
exports.getHome = getHome;
function setHome(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_HOME;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setHome = setHome;
function getVerifylsp() {
    let key = exports.ROBOCORP_VERIFY_LSP;
    return get(key);
}
exports.getVerifylsp = getVerifylsp;
function setVerifylsp(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_VERIFY_LSP;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setVerifylsp = setVerifylsp;
function getAutosetpythonextensioninterpreter() {
    let key = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_INTERPRETER;
    return get(key);
}
exports.getAutosetpythonextensioninterpreter = getAutosetpythonextensioninterpreter;
function setAutosetpythonextensioninterpreter(value) {
    return __awaiter(this, void 0, void 0, function* () {
        let key = exports.ROBOCORP_AUTO_SET_PYTHON_EXTENSION_INTERPRETER;
        let i = key.lastIndexOf('.');
        let config = vscode_1.workspace.getConfiguration(key.slice(0, i));
        yield config.update(key.slice(i + 1), value, vscode_1.ConfigurationTarget.Global);
    });
}
exports.setAutosetpythonextensioninterpreter = setAutosetpythonextensioninterpreter;
//# sourceMappingURL=robocorpSettings.js.map